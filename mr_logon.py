# Form implementation generated from reading ui file '.\ui\MrLogon.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import pickle
import sys

import userpaths
from PyQt6 import QtCore, QtGui, QtWidgets

from addAction import AddAction
from add_login import AddLogin

logins = []





class Ui_MainWindow(object):
    path = userpaths.get_local_appdata() + '\MrLogon'

    def close(self):
        sys.exit(app)

    def addLogin(self):
        self.dialog = QtWidgets.QDialog()
        self.dialog.setFixedSize(400, 200)
        self.dialog.setStyleSheet("background-color: rgb(252, 186, 3);")
        self.dialog.setWindowFlags(QtCore.Qt.WindowType.Window.FramelessWindowHint)

        self.ui = AddLogin(self)
        self.ui.setupUi(self.dialog)
        self.dialog.show()

    def removeItem(self):
        os.remove(Ui_MainWindow.path+'\\'+logins[self.selectedIndex].title)
        self.reload()

    def addAction(self):
        self.addActionDialog = QtWidgets.QDialog()
        # self.addActionDialog.setFixedSize(400, 200)
        self.addActionDialog.setStyleSheet("background-color: rgb(84, 202, 255);")
        self.addActionDialog.setWindowFlags(QtCore.Qt.WindowType.Window.FramelessWindowHint)

        self.ui = AddAction(logins[self.selectedIndex])
        self.ui.setupUi(self.addActionDialog)
        self.addActionDialog.show()


    def reload(self):
        initialize()
        self.setupUi(self.mainWindow)

    def makeLogin(self, item: QtCore.QModelIndex):
        print('index=', item.row())

    def setSelected(self, item: QtCore.QModelIndex):
        self.selectedIndex = self.listView.selectedIndexes()[0].row()
        # print(self.selectedIndex.row())

    def selectionChanged(self):
        value=len(self.listView.selectedIndexes())>0

        self.deleteButton.setEnabled(value)
        self.deleteButton.setStyleSheet("background-color: rgba(255, 195, 195, 190);" if value else'background-color: rgba(255, 195, 195, 74);')

        self.editActions.setEnabled(value)
        self.editActions.setStyleSheet("background-color: rgba(195, 255, 195, 190);" if value else'background-color: rgba(195, 255, 195, 74);')



    def setupUi(self, MainWindow):
        self.mainWindow=MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(627, 506)
        MainWindow.setStyleSheet("background-color: rgb(58, 58, 58);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.listView = QtWidgets.QListWidget(self.centralwidget)
        self.listView.setGeometry(QtCore.QRect(20, 90, 581, 271))
        self.listView.setStyleSheet(
            "background-color: qradialgradient(spread:pad, cx:0.5, cy:0.5, radius:0.5, fx:0.5, fy:0.5, stop:0 rgba(70, 70, 70, 255), stop:1 rgba(58, 58, 58, 255));")
        self.listView.setObjectName("listView")

        for l in logins:
            login = QtWidgets.QListWidgetItem()
            login.setText(l.title)
            icon2 = QtGui.QIcon()
            icon2.addPixmap(QtGui.QPixmap(".\\ui\\../../../Desktop/DA VEDERE/Icone/Icojam-Blue-Bits-Math-add.ico"),
                            QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)

            login.setIcon(icon2)

            font = QtGui.QFont()
            font.setFamily("Corbel")
            font.setPointSize(22)
            login.setFont(font)
            login.setForeground(QtGui.QBrush(QtGui.QColor(255, 255, 255, 200)))
            self.listView.addItem(login)

        self.listView.setIconSize(QtCore.QSize(48, 48))
        self.listView.doubleClicked.connect(self.makeLogin)
        self.listView.itemClicked.connect(self.setSelected)
        self.listView.itemSelectionChanged.connect(self.selectionChanged)

        self.closeButton = QtWidgets.QPushButton(self.centralwidget)
        self.closeButton.setEnabled(True)
        self.closeButton.setGeometry(QtCore.QRect(540, 10, 61, 61))
        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(14)
        self.closeButton.setFont(font)
        self.closeButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.closeButton.setStyleSheet("background-color: rgba(255, 195, 195, 0);")
        self.closeButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(".\\ui\\../../../Desktop/DA VEDERE/Icone/Blackvariant-Shadow135-System-X11.ico"),
                       QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.closeButton.setIcon(icon)
        self.closeButton.setIconSize(QtCore.QSize(64, 64))
        self.closeButton.setObjectName("pushButton_3")
        self.closeButton.clicked.connect(self.close)

        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(20, 400, 581, 82))
        self.widget.setObjectName("widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                           QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.deleteButton = QtWidgets.QPushButton(self.widget)
        self.deleteButton.setEnabled(False)

        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(14)

        self.deleteButton.setFont(font)
        self.deleteButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.deleteButton.setStyleSheet("background-color: rgba(255, 195, 195, 74);")
        self.deleteButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(".\\ui\\../../../Desktop/DA VEDERE/Icone/Tatice-Just-Bins-Bin-red-full.ico"),
                        QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.deleteButton.setIcon(icon1)
        self.deleteButton.setIconSize(QtCore.QSize(72, 72))
        self.deleteButton.setObjectName("deleteButton")
        self.deleteButton.clicked.connect(self.removeItem)
        self.horizontalLayout.addWidget(self.deleteButton)

        self.editActions = QtWidgets.QPushButton(self.widget)
        self.editActions.setEnabled(False)
        self.editActions.setFont(font)
        self.editActions.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.editActions.setStyleSheet("background-color: rgba(195, 255, 195, 74);")
        self.editActions.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(".\\ui\\../../../Desktop/DA VEDERE/Icone/Iynque-Ios7-Style-Settings.ico"),
                        QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.editActions.setIcon(icon1)
        self.editActions.setIconSize(QtCore.QSize(72, 72))
        self.editActions.setObjectName("editActions")
        self.editActions.clicked.connect(self.addAction)
        self.horizontalLayout.addWidget(self.editActions)

        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setFont(font)
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.pushButton.setStyleSheet("background-color: rgba(167, 232, 255, 190);")
        self.pushButton.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(".\\ui\\../../../Desktop/DA VEDERE/Icone/Icojam-Blue-Bits-Math-add.ico"),
                        QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pushButton.setIcon(icon2)
        self.pushButton.setIconSize(QtCore.QSize(72, 72))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.addLogin)

        self.horizontalLayout.addWidget(self.pushButton)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 627, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.closeButton.setToolTip(_translate("MainWindow",
                                                "<html><head/><body><p align=\"center\"><span style=\" font-size:16pt; font-weight:600;\">Exit</span><span style=\" font-size:16pt;\"> </span></p></body></html>"))
        self.deleteButton.setToolTip(_translate("MainWindow",
                                                "<html><head/><body><p align=\"center\"><span style=\" font-size:16pt; font-weight:600;\">Delete</span><span style=\" font-size:16pt;\"> Item</span></p></body></html>"))
        self.pushButton.setToolTip(_translate("MainWindow",
                                              "<html><head/><body><p align=\"center\"><span style=\" font-size:18pt; font-weight:600; color:#1c2059;\">Add</span><span style=\" font-size:18pt; color:#1c2059;\"> Login</span></p></body></html>"))


def initialize():
    global logins
    logins=[]
    if not os.path.exists(Ui_MainWindow.path):
        os.makedirs(Ui_MainWindow.path)
        return
    for filename in next(os.walk(Ui_MainWindow.path), (None, None, []))[2]:
        with open(Ui_MainWindow.path + '\\' + filename, 'rb') as f:
            login = pickle.load(f)
            logins.append(login)


if __name__ == "__main__":
    initialize()
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    MainWindow.setWindowFlags(QtCore.Qt.WindowType.Window.FramelessWindowHint)
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
